"""added tags and genre

Revision ID: 6741246eac76
Revises: deaee7746415
Create Date: 2025-04-04 13:22:00.803640

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '6741246eac76'
down_revision: Union[str, None] = 'deaee7746415'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('genre',
    sa.Column('genre_uuid', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('genre_uuid')
    )
    op.create_table('tag',
    sa.Column('tag_uuid', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('tag_uuid')
    )
    op.create_table('album_genre_bridge',
    sa.Column('album_uuid', sa.Uuid(), nullable=False),
    sa.Column('genre_uuid', sa.Uuid(), nullable=False),
    sa.Column('count', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['album_uuid'], ['album.album_uuid'], ),
    sa.ForeignKeyConstraint(['genre_uuid'], ['genre.genre_uuid'], ),
    sa.PrimaryKeyConstraint('album_uuid', 'genre_uuid')
    )
    op.create_table('album_tag_bridge',
    sa.Column('album_uuid', sa.Uuid(), nullable=False),
    sa.Column('tag_uuid', sa.Uuid(), nullable=False),
    sa.Column('count', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['album_uuid'], ['album.album_uuid'], ),
    sa.ForeignKeyConstraint(['tag_uuid'], ['tag.tag_uuid'], ),
    sa.PrimaryKeyConstraint('album_uuid', 'tag_uuid')
    )
    op.create_table('album_release_genre_bridge',
    sa.Column('album_release_uuid', sa.Uuid(), nullable=False),
    sa.Column('genre_uuid', sa.Uuid(), nullable=False),
    sa.Column('count', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['album_release_uuid'], ['album_release.album_release_uuid'], ),
    sa.ForeignKeyConstraint(['genre_uuid'], ['genre.genre_uuid'], ),
    sa.PrimaryKeyConstraint('album_release_uuid', 'genre_uuid')
    )
    op.create_table('album_release_tag_bridge',
    sa.Column('album_release_uuid', sa.Uuid(), nullable=False),
    sa.Column('tag_uuid', sa.Uuid(), nullable=False),
    sa.Column('count', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['album_release_uuid'], ['album_release.album_release_uuid'], ),
    sa.ForeignKeyConstraint(['tag_uuid'], ['tag.tag_uuid'], ),
    sa.PrimaryKeyConstraint('album_release_uuid', 'tag_uuid')
    )
    op.create_table('track_version_genre_bridge',
    sa.Column('track_version_uuid', sa.Uuid(), nullable=False),
    sa.Column('genre_uuid', sa.Uuid(), nullable=False),
    sa.Column('count', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['genre_uuid'], ['genre.genre_uuid'], ),
    sa.ForeignKeyConstraint(['track_version_uuid'], ['track_version.track_version_uuid'], ),
    sa.PrimaryKeyConstraint('track_version_uuid', 'genre_uuid')
    )
    op.create_table('track_version_tag_bridge',
    sa.Column('track_version_uuid', sa.Uuid(), nullable=False),
    sa.Column('tag_uuid', sa.Uuid(), nullable=False),
    sa.Column('count', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['tag_uuid'], ['tag.tag_uuid'], ),
    sa.ForeignKeyConstraint(['track_version_uuid'], ['track_version.track_version_uuid'], ),
    sa.PrimaryKeyConstraint('track_version_uuid', 'tag_uuid')
    )
    op.add_column('album', sa.Column('musicbrainz_release_group_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.create_index(op.f('ix_album_musicbrainz_release_group_id'), 'album', ['musicbrainz_release_group_id'], unique=False)
    op.add_column('album_release', sa.Column('musicbrainz_release_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.create_index(op.f('ix_album_release_musicbrainz_release_id'), 'album_release', ['musicbrainz_release_id'], unique=False)
    op.add_column('track_version', sa.Column('recording_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.create_index(op.f('ix_track_version_recording_id'), 'track_version', ['recording_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_track_version_recording_id'), table_name='track_version')
    op.drop_column('track_version', 'recording_id')
    op.drop_index(op.f('ix_album_release_musicbrainz_release_id'), table_name='album_release')
    op.drop_column('album_release', 'musicbrainz_release_id')
    op.drop_index(op.f('ix_album_musicbrainz_release_group_id'), table_name='album')
    op.drop_column('album', 'musicbrainz_release_group_id')
    op.drop_table('track_version_tag_bridge')
    op.drop_table('track_version_genre_bridge')
    op.drop_table('album_release_tag_bridge')
    op.drop_table('album_release_genre_bridge')
    op.drop_table('album_tag_bridge')
    op.drop_table('album_genre_bridge')
    op.drop_table('tag')
    op.drop_table('genre')
    # ### end Alembic commands ###
